version: '3.8'

services:
  # FastAPI 主應用（開發環境）
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      # 代碼熱重載
      - ./app:/app/app
      - ./config:/app/config
      # 持久化存儲
      - ./app/models:/app/app/models
      - ./data:/app/data
      - ./logs:/app/logs
      - ./outputs:/app/outputs
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis（任務佇列和快取）
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker（背景任務）
  worker:
    build: 
      context: .
      dockerfile: Dockerfile
    command: celery -A app.tasks worker --loglevel=info --concurrency=2
    volumes:
      - ./app:/app/app
      - ./config:/app/config
      - ./app/models:/app/app/models
      - ./data:/app/data
      - ./logs:/app/logs
      - ./outputs:/app/outputs
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    depends_on:
      - redis
    restart: unless-stopped

  # Flower（Celery 監控）
  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    command: celery -A app.tasks flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
      - worker
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local

networks:
  default:
    driver: bridge
