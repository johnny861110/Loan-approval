[project]
name = "loan-approval-stacking"
version = "1.0.0"
description = "Advanced loan approval prediction using LightGBM + XGBoost stacking with FastAPI"
requires-python = ">=3.10"
authors = [
    {name = "Loan Approval Team", email = "team@loanapproval.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core ML libraries
    "pandas>=2.2.0",
    "numpy>=2.1.0",
    "scikit-learn>=1.5.0",
    # ML Models
    "lightgbm>=4.3.0",
    "xgboost>=2.0.3",
    # Hyperparameter optimization
    "hyperopt>=0.2.7",
    "optuna>=3.6.0",
    # Model explanation (更新版本以支援 Python 3.10+)
    "shap>=0.47.0",
    # API framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    # Async task queue
    "celery>=5.3.0",
    "redis>=5.0.0",
    # Data validation
    "pydantic>=2.4.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "joblib>=1.3.0",
    "click>=8.1.0",
    # Visualization
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    # Progress bars
    "tqdm>=4.66.0",
    # HTTP client for testing
    "httpx>=0.25.0",
    "catboost>=1.2.8",
    "setuptools>=80.9.0",
    "requests>=2.32.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.scripts]
loan-train = "app.scripts.train:main"
loan-predict = "app.scripts.predict:main"
loan-api = "app.scripts.serve:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app", "src"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "src"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["app", "src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
